// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  sessions  Session[]
  imageUrl   String?

  userToProjects UserToProject[]
  QuestionsAsked Question[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userAgent String?
  ip        String?
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  githubUrl String
  deletedAt DateTime?

  userToProjects UserToProject[]

  Commit              Commit[]
  sourceCodeEmbedding SourceCodeEmbedding[]
  SavedQuestion       Question[]
  Meetings            Meeting[]
}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
}

model Commit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id],onDelete: Cascade)

  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime
  summary            String
}

model Issue {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  start     String
  end       String
  gist      String
  headline  String
  summary   String
  meetingId String
  meeting   Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

model SourceCodeEmbedding {
  id String @id @default(cuid())

  summaryEmbedding Unsupported("Vector(768)")?
  sourceCode       String
  fileName         String
  summary          String
  projectId        String
  project          Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Question {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question String
  answer   String?

  filesRefrences Json?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Meeting {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meetingUrl String
  name       String
  status     MeetingStatus @default(PROCESSING)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  issues    Issue[]
}

enum MeetingStatus {
  PROCESSING
  COMPLETED
}
